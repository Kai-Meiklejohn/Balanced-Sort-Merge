name: Java CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 21
      uses: actions/setup-java@v3
      with:
        java-version: '21'

    - name: Compile XSort
      run: javac XSort.java

    - name: Test MobyDick.txt with run length 64, 2-way merge
      run: |
        cat MobyDick.txt | java XSort 64 2 > moby_xsort.txt
        [ -s moby_xsort.txt ] || { echo "XSort failed for MobyDick.txt"; exit 1; }
        cat MobyDick.txt | sort > moby_expected.txt
        diff moby_xsort.txt moby_expected.txt > moby_diff.txt
        if [ -s moby_diff.txt ]; then
          echo "Test failed: MobyDick.txt outputs differ"
          cat moby_diff.txt
          exit 1
        else
          echo "Test passed: MobyDick.txt matches expected sorting"
          sort -c moby_xsort.txt && echo "MobyDick.txt is sorted correctly" || { echo "MobyDick.txt is not sorted"; exit 1; }
        fi

    - name: Test BrownCorpus.txt with run length 64, 2-way merge
      run: |
        cat BrownCorpus.txt | java XSort 64 2 > brown_xsort.txt
        [ -s brown_xsort.txt ] || { echo "XSort failed for BrownCorpus.txt"; exit 1; }
        cat BrownCorpus.txt | sort > brown_expected.txt
        diff brown_xsort.txt brown_expected.txt > brown_diff.txt
        if [ -s brown_diff.txt ]; then
          echo "Test failed: BrownCorpus.txt outputs differ"
          cat brown_diff.txt
          exit 1
        else
          echo "Test passed: BrownCorpus.txt matches expected sorting"
          sort -c brown_xsort.txt && echo "BrownCorpus.txt is sorted correctly" || { echo "BrownCorpus.txt is not sorted"; exit 1; }
        fi

    - name: Test generated input (200 lines) with run length 64, 2-way merge
      run: |
        for i in {1..50}; do
          echo "Line $i: The quick brown fox jumps over the lazy dog." >> test_input.txt
          echo "Line $i: A journey of $i miles begins with a single step." >> test_input.txt
          echo "Line $i: \"Quoted text with number $i\" - Anonymous" >> test_input.txt
          echo "Line $i: !@#$%^&* Special chars test $i" >> test_input.txt
        done
        cat test_input.txt | java XSort 64 2 > test_xsort.txt
        [ -s test_xsort.txt ] || { echo "XSort failed for generated input"; exit 1; }
        cat test_input.txt | sort > test_expected.txt
        diff test_xsort.txt test_expected.txt > test_diff.txt
        if [ -s test_diff.txt ]; then
          echo "Test failed: Generated input outputs differ"
          cat test_diff.txt
          exit 1
        else
          echo "Test passed: Generated input matches expected sorting"
          sort -c test_xsort.txt && echo "Generated input is sorted correctly" || { echo "Generated input is not sorted"; exit 1; }
        fi

    - name: Cleanup
      if: always()
      run: rm -f moby_xsort.txt moby_expected.txt moby_diff.txt brown_xsort.txt brown_expected.txt brown_diff.txt test_input.txt test_xsort.txt test_expected.txt test_diff.txt